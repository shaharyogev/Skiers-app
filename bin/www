#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('database:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

 
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
* Socket IO listen 
*/


var io = require('socket.io')(server);



let connectionsList = new Array;
let chatOnlineUsersList = []

chatOnlineUsersList = ['test1','test2','test3']

io.on('connection', function(socket){
  connectionsList.push(socket);
  console.log('conected: ', connectionsList.length);

  socket.on('disconnect', function(d){
    chatOnlineUsersList.splice(chatOnlineUsersList.indexOf(socket.userName), 1);
    io.emit('onlineUsersList', chatOnlineUsersList);
    connectionsList.splice( connectionsList.indexOf(socket), 1);
  });
  

  socket.on('namedUserConnected',function(d){


    socket.userName = d.userName;
    chatOnlineUsersList.push(socket.userName)
    let uniqueChatOnlineUsersList = [...new Set(chatOnlineUsersList)]
    io.emit('updateOnlineUsersList', uniqueChatOnlineUsersList)
    //io.emit('newUserConnected', d.userName);
  });

  
  socket.on('form data', function(d){
    io.emit('form data' + d)
  });
  socket.on('new message', function(d, fn){
    d.user
    fn( + ' sent ' + d.message);
    io.emit('new message', d)
  console.log('user: ' + d.user + ' message: ' + d.message)
  })
  socket.on('submit', function(d){
    console.log('button submit:' + d )
  })
  
 
});



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


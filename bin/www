#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('database:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */


server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Socket IO listen 
 */


var io = require('socket.io')(server);



let connectionsList = new Array;
let chatOnlineUsersList = new Array;
let chatHistory = new Array;

chatOnlineUsersList = ['leia organa', 'obi-wan kenobi', 'luke skywalker', 'darth vader', 'yoda', 'han solo'];
chatHistory = [

  {
    userName: 'leia organa',
    message: 'Help me, Obi-Wan Kenobi. You\'re my only hope.'
  },
  {
    userName: 'obi-wan kenobi',
    message: 'The Force will be with you. Always.'
  },
  {
    userName: 'darth vader',
    message: 'I find your lack of faith disturbing.'
  },
  {
    userName: 'luke skywalker',
    message: 'I\'ll never turn to the dark side. You\'ve failed, your highness. I am a Jedi, like my father before me.'
  },
  {
    userName: 'darth vader',
    message: 'No. I am your father.'
  },
  {
    userName: 'yoda',
    message: 'When gone am I, the last of the Jedi will you be. The Force runs strong in your family. Pass on what you have learned.'
  },
  {
    userName: 'yoda',
    message: 'Fear is the path to the dark side. Fear leads to anger; anger leads to hate; hate leads to suffering. I sense much fear in you.'
  },
  {
    userName: 'yoda',
    message: 'Do. Or do not. There is no try.'
  },
  {
    userName: 'han solo',
    message: 'Never tell me the odds!'
  },
  {
    userName: 'yoda',
    message: 'Do. Or do not. There is no try.'
  },
  {
    userName: 'Obi-Wan Kenobi',
    message: 'Well, if droids could think, there\'d be none of us here, would there?'
  }
]

io.on('connection', function (socket) {
  connectionsList.push(socket);


  socket.on('disconnect', function () {
    chatOnlineUsersList.splice(chatOnlineUsersList.indexOf(socket.userName), 1);
    io.emit('onlineUsersList', chatOnlineUsersList);
    connectionsList.splice(connectionsList.indexOf(socket), 1);
  });


  socket.on('namedUserConnected', function (d) {
    socket.userName = d.userName;
    chatOnlineUsersList.push(socket.userName);
    let uniqueChatOnlineUsersList = [...new Set(chatOnlineUsersList)];
    io.emit('updateOnlineUsersList', uniqueChatOnlineUsersList);
    socket.emit('sendChatHistory', chatHistory);
  });


  socket.on('form data', function (d) {
    io.emit('form data' + d)
  });


  socket.on('new message', function (d, cb) {
    if (!socket.userName) {
      socket.emit('reload');
    } else {
      let lastMessage = {
        userName: socket.userName,
        message: d.message
      }
      chatHistory.push({
        userName: socket.userName,
        message: d.message
      })
      io.emit('new message', lastMessage)
    }
  })
});



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}